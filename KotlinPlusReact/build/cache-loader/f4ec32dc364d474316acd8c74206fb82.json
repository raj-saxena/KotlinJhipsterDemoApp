{"remainingRequest":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/ts-loader/index.js??ref--4-3!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx","dependencies":[{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx","mtime":1571750346191},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Col, Row, Button } from 'reactstrap';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Translate, translate, getUrlParameter } from 'react-jhipster';\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nexport const PasswordResetFinishPage = (props) => {\n    const [password, setPassword] = useState('');\n    const [key] = useState(getUrlParameter('key', props.location.search));\n    useEffect(() => () => props.reset(), []);\n    const handleValidSubmit = (event, values) => props.handlePasswordResetFinish(key, values.newPassword);\n    const updatePassword = event => setPassword(event.target.value);\n    const getResetForm = () => {\n        return (React.createElement(AvForm, { onValidSubmit: handleValidSubmit },\n            React.createElement(AvField, { name: \"newPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\n                    required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                    minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                }, onChange: updatePassword }),\n            React.createElement(PasswordStrengthBar, { password: password }),\n            React.createElement(AvField, { name: \"confirmPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                    required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                    minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                    maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                    match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\n                } }),\n            React.createElement(Button, { color: \"success\", type: \"submit\" },\n                React.createElement(Translate, { contentKey: \"reset.finish.form.button\" }, \"Validate new password\"))));\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"4\" },\n                React.createElement(\"h1\", null,\n                    React.createElement(Translate, { contentKey: \"reset.finish.title\" }, \"Reset password\")),\n                React.createElement(\"div\", null, key ? getResetForm() : null)))));\n};\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\nexport default connect(null, mapDispatchToProps)(PasswordResetFinishPage);\n",{"version":3,"file":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx","sourceRoot":"","sources":["/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Col, Row, Button } from 'reactstrap';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Translate, translate, getUrlParameter } from 'react-jhipster';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\n\nexport interface IPasswordResetFinishProps extends DispatchProps, RouteComponentProps<{ key: string }> {}\n\nexport const PasswordResetFinishPage = (props: IPasswordResetFinishProps) => {\n  const [password, setPassword] = useState('');\n  const [key] = useState(getUrlParameter('key', props.location.search));\n\n  useEffect(() => () => props.reset(), []);\n\n  const handleValidSubmit = (event, values) => props.handlePasswordResetFinish(key, values.newPassword);\n\n  const updatePassword = event => setPassword(event.target.value);\n\n  const getResetForm = () => {\n    return (\n      <AvForm onValidSubmit={handleValidSubmit}>\n        <AvField\n          name=\"newPassword\"\n          label={translate('global.form.newpassword.label')}\n          placeholder={translate('global.form.newpassword.placeholder')}\n          type=\"password\"\n          validate={{\n            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n          }}\n          onChange={updatePassword}\n        />\n        <PasswordStrengthBar password={password} />\n        <AvField\n          name=\"confirmPassword\"\n          label={translate('global.form.confirmpassword.label')}\n          placeholder={translate('global.form.confirmpassword.placeholder')}\n          type=\"password\"\n          validate={{\n            required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n            match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\n          }}\n        />\n        <Button color=\"success\" type=\"submit\">\n          <Translate contentKey=\"reset.finish.form.button\">Validate new password</Translate>\n        </Button>\n      </AvForm>\n    );\n  };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"4\">\n          <h1>\n            <Translate contentKey=\"reset.finish.title\">Reset password</Translate>\n          </h1>\n          <div>{key ? getResetForm() : null}</div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\n\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(PasswordResetFinishPage);\n"]}]}