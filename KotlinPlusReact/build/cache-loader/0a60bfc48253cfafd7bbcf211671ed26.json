{"remainingRequest":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/ts-loader/index.js??ref--4-3!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management.tsx","dependencies":[{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management.tsx","mtime":1571750346501},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Table, Row, Badge } from 'reactstrap';\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nimport { getUsers, updateUser } from './user-management.reducer';\nexport const UserManagement = (props) => {\n    const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));\n    const getAllUsers = () => props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);\n    useEffect(() => {\n        getAllUsers();\n    }, []);\n    const sortUsers = () => getAllUsers();\n    useEffect(() => {\n        sortUsers();\n    }, [pagination.activePage, pagination.order, pagination.sort]);\n    const sort = p => () => {\n        setPagination(Object.assign({}, pagination, { order: pagination.order === 'asc' ? 'desc' : 'asc', sort: p }));\n        props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);\n    };\n    const handlePagination = currentPage => setPagination(Object.assign({}, pagination, { activePage: currentPage }));\n    const toggleActive = user => () => props.updateUser(Object.assign({}, user, { activated: !user.activated }));\n    const { users, account, match, totalItems } = props;\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h2\", { id: \"user-management-page-heading\" },\n            React.createElement(Translate, { contentKey: \"userManagement.home.title\" }, \"Users\"),\n            React.createElement(Link, { to: `${match.url}/new`, className: \"btn btn-primary float-right jh-create-entity\" },\n                React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\n                \" \",\n                React.createElement(Translate, { contentKey: \"userManagement.home.createLabel\" }, \"Create a new user\"))),\n        React.createElement(Table, { responsive: true, striped: true },\n            React.createElement(\"thead\", null,\n                React.createElement(\"tr\", null,\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('id') },\n                        React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('login') },\n                        React.createElement(Translate, { contentKey: \"userManagement.login\" }, \"Login\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('email') },\n                        React.createElement(Translate, { contentKey: \"userManagement.email\" }, \"Email\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", null),\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('langKey') },\n                        React.createElement(Translate, { contentKey: \"userManagement.langKey\" }, \"Lang Key\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", null,\n                        React.createElement(Translate, { contentKey: \"userManagement.profiles\" }, \"Profiles\")),\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('createdDate') },\n                        React.createElement(Translate, { contentKey: \"userManagement.createdDate\" }, \"Created Date\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", { className: \"hand\", onClick: sort('lastModifiedBy') },\n                        React.createElement(Translate, { contentKey: \"userManagement.lastModifiedBy\" }, \"Last Modified By\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", { id: \"modified-date-sort\", className: \"hand\", onClick: sort('lastModifiedDate') },\n                        React.createElement(Translate, { contentKey: \"userManagement.lastModifiedDate\" }, \"Last Modified Date\"),\n                        React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\n                    React.createElement(\"th\", null))),\n            React.createElement(\"tbody\", null, users.map((user, i) => (React.createElement(\"tr\", { id: user.login, key: `user-${i}` },\n                React.createElement(\"td\", null,\n                    React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}`, color: \"link\", size: \"sm\" }, user.id)),\n                React.createElement(\"td\", null, user.login),\n                React.createElement(\"td\", null, user.email),\n                React.createElement(\"td\", null, user.activated ? (React.createElement(Button, { color: \"success\", onClick: toggleActive(user) }, \"Activated\")) : (React.createElement(Button, { color: \"danger\", onClick: toggleActive(user) }, \"Deactivated\"))),\n                React.createElement(\"td\", null, user.langKey),\n                React.createElement(\"td\", null, user.authorities\n                    ? user.authorities.map((authority, j) => (React.createElement(\"div\", { key: `user-auth-${i}-${j}` },\n                        React.createElement(Badge, { color: \"info\" }, authority))))\n                    : null),\n                React.createElement(\"td\", null,\n                    React.createElement(TextFormat, { value: user.createdDate, type: \"date\", format: APP_DATE_FORMAT, blankOnInvalid: true })),\n                React.createElement(\"td\", null, user.lastModifiedBy),\n                React.createElement(\"td\", null,\n                    React.createElement(TextFormat, { value: user.lastModifiedDate, type: \"date\", format: APP_DATE_FORMAT, blankOnInvalid: true })),\n                React.createElement(\"td\", { className: \"text-right\" },\n                    React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}`, color: \"info\", size: \"sm\" },\n                            React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\n                            ' ',\n                            React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                React.createElement(Translate, { contentKey: \"entity.action.view\" }, \"View\"))),\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}/edit`, color: \"primary\", size: \"sm\" },\n                            React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\n                            ' ',\n                            React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                React.createElement(Translate, { contentKey: \"entity.action.edit\" }, \"Edit\"))),\n                        React.createElement(Button, { tag: Link, to: `${match.url}/${user.login}/delete`, color: \"danger\", size: \"sm\", disabled: account.login === user.login },\n                            React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\n                            ' ',\n                            React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                                React.createElement(Translate, { contentKey: \"entity.action.delete\" }, \"Delete\")))))))))),\n        React.createElement(\"div\", { className: users && users.length > 0 ? '' : 'd-none' },\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(JhiItemCount, { page: pagination.activePage, total: totalItems, itemsPerPage: pagination.itemsPerPage, i18nEnabled: true })),\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(JhiPagination, { activePage: pagination.activePage, onSelect: handlePagination, maxButtons: 5, itemsPerPage: pagination.itemsPerPage, totalItems: props.totalItems })))));\n};\nconst mapStateToProps = (storeState) => ({\n    users: storeState.userManagement.users,\n    totalItems: storeState.userManagement.totalItems,\n    account: storeState.authentication.account\n});\nconst mapDispatchToProps = { getUsers, updateUser };\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\n",{"version":3,"file":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management.tsx","sourceRoot":"","sources":["/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Table, Row, Badge } from 'reactstrap';\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nimport { getUsers, updateUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport const UserManagement = (props: IUserManagementProps) => {\n  const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));\n\n  const getAllUsers = () => props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);\n\n  useEffect(() => {\n    getAllUsers();\n  }, []);\n\n  const sortUsers = () => getAllUsers();\n\n  useEffect(() => {\n    sortUsers();\n  }, [pagination.activePage, pagination.order, pagination.sort]);\n\n  const sort = p => () => {\n    setPagination({\n      ...pagination,\n      order: pagination.order === 'asc' ? 'desc' : 'asc',\n      sort: p\n    });\n    props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);\n  };\n\n  const handlePagination = currentPage =>\n    setPagination({\n      ...pagination,\n      activePage: currentPage\n    });\n\n  const toggleActive = user => () =>\n    props.updateUser({\n      ...user,\n      activated: !user.activated\n    });\n\n  const { users, account, match, totalItems } = props;\n  return (\n    <div>\n      <h2 id=\"user-management-page-heading\">\n        <Translate contentKey=\"userManagement.home.title\">Users</Translate>\n        <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n          <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\n        </Link>\n      </h2>\n      <Table responsive striped>\n        <thead>\n          <tr>\n            <th className=\"hand\" onClick={sort('id')}>\n              <Translate contentKey=\"global.field.id\">ID</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('login')}>\n              <Translate contentKey=\"userManagement.login\">Login</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('email')}>\n              <Translate contentKey=\"userManagement.email\">Email</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th />\n            <th className=\"hand\" onClick={sort('langKey')}>\n              <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th>\n              <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n            </th>\n            <th className=\"hand\" onClick={sort('createdDate')}>\n              <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('lastModifiedBy')}>\n              <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th id=\"modified-date-sort\" className=\"hand\" onClick={sort('lastModifiedDate')}>\n              <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, i) => (\n            <tr id={user.login} key={`user-${i}`}>\n              <td>\n                <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\n                  {user.id}\n                </Button>\n              </td>\n              <td>{user.login}</td>\n              <td>{user.email}</td>\n              <td>\n                {user.activated ? (\n                  <Button color=\"success\" onClick={toggleActive(user)}>\n                    Activated\n                  </Button>\n                ) : (\n                  <Button color=\"danger\" onClick={toggleActive(user)}>\n                    Deactivated\n                  </Button>\n                )}\n              </td>\n              <td>{user.langKey}</td>\n              <td>\n                {user.authorities\n                  ? user.authorities.map((authority, j) => (\n                      <div key={`user-auth-${i}-${j}`}>\n                        <Badge color=\"info\">{authority}</Badge>\n                      </div>\n                    ))\n                  : null}\n              </td>\n              <td>\n                <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n              </td>\n              <td>{user.lastModifiedBy}</td>\n              <td>\n                <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n              </td>\n              <td className=\"text-right\">\n                <div className=\"btn-group flex-btn-group-container\">\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\n                    <FontAwesomeIcon icon=\"eye\" />{' '}\n                    <span className=\"d-none d-md-inline\">\n                      <Translate contentKey=\"entity.action.view\">View</Translate>\n                    </span>\n                  </Button>\n                  <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\n                    <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\n                    <span className=\"d-none d-md-inline\">\n                      <Translate contentKey=\"entity.action.edit\">Edit</Translate>\n                    </span>\n                  </Button>\n                  <Button\n                    tag={Link}\n                    to={`${match.url}/${user.login}/delete`}\n                    color=\"danger\"\n                    size=\"sm\"\n                    disabled={account.login === user.login}\n                  >\n                    <FontAwesomeIcon icon=\"trash\" />{' '}\n                    <span className=\"d-none d-md-inline\">\n                      <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n                    </span>\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <div className={users && users.length > 0 ? '' : 'd-none'}>\n        <Row className=\"justify-content-center\">\n          <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\n        </Row>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            activePage={pagination.activePage}\n            onSelect={handlePagination}\n            maxButtons={5}\n            itemsPerPage={pagination.itemsPerPage}\n            totalItems={props.totalItems}\n          />\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers, updateUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagement);\n"]}]}