{"remainingRequest":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/ts-loader/index.js??ref--4-3!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","dependencies":[{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","mtime":1571750346530},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { locales, languages } from 'app/config/translation';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nexport const UserManagementUpdate = (props) => {\n    const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);\n    useEffect(() => {\n        if (isNew) {\n            props.reset();\n        }\n        else {\n            props.getUser(props.match.params.login);\n        }\n        props.getRoles();\n        return () => props.reset();\n    }, []);\n    const handleClose = () => {\n        props.history.push('/admin/user-management');\n    };\n    const saveUser = (event, values) => {\n        if (isNew) {\n            props.createUser(values);\n        }\n        else {\n            props.updateUser(values);\n        }\n        handleClose();\n    };\n    const isInvalid = false;\n    const { user, loading, updating, roles } = props;\n    return (React.createElement(\"div\", null,\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" },\n                React.createElement(\"h1\", null,\n                    React.createElement(Translate, { contentKey: \"userManagement.home.createOrEditLabel\" }, \"Create or edit a User\")))),\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { onValidSubmit: saveUser },\n                user.id ? (React.createElement(AvGroup, null,\n                    React.createElement(Label, { for: \"id\" },\n                        React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true, value: user.id }))) : null,\n                React.createElement(AvGroup, null,\n                    React.createElement(Label, { for: \"login\" },\n                        React.createElement(Translate, { contentKey: \"userManagement.login\" }, \"Login\")),\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"login\", validate: {\n                            required: {\n                                value: true,\n                                errorMessage: translate('register.messages.validate.login.required')\n                            },\n                            pattern: {\n                                value: '^[_.@A-Za-z0-9-]*$',\n                                errorMessage: translate('register.messages.validate.login.pattern')\n                            },\n                            minLength: {\n                                value: 1,\n                                errorMessage: translate('register.messages.validate.login.minlength')\n                            },\n                            maxLength: {\n                                value: 50,\n                                errorMessage: translate('register.messages.validate.login.maxlength')\n                            }\n                        }, value: user.login })),\n                React.createElement(AvGroup, null,\n                    React.createElement(Label, { for: \"firstName\" },\n                        React.createElement(Translate, { contentKey: \"userManagement.firstName\" }, \"First Name\")),\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"firstName\", validate: {\n                            maxLength: {\n                                value: 50,\n                                errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                            }\n                        }, value: user.firstName })),\n                React.createElement(AvGroup, null,\n                    React.createElement(Label, { for: \"lastName\" },\n                        React.createElement(Translate, { contentKey: \"userManagement.lastName\" }, \"Last Name\")),\n                    React.createElement(AvField, { type: \"text\", className: \"form-control\", name: \"lastName\", validate: {\n                            maxLength: {\n                                value: 50,\n                                errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                            }\n                        }, value: user.lastName }),\n                    React.createElement(AvFeedback, null, \"This field cannot be longer than 50 characters.\")),\n                React.createElement(AvGroup, null,\n                    React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\n                            required: {\n                                value: true,\n                                errorMessage: translate('global.messages.validate.email.required')\n                            },\n                            email: {\n                                errorMessage: translate('global.messages.validate.email.invalid')\n                            },\n                            minLength: {\n                                value: 5,\n                                errorMessage: translate('global.messages.validate.email.minlength')\n                            },\n                            maxLength: {\n                                value: 254,\n                                errorMessage: translate('global.messages.validate.email.maxlength')\n                            }\n                        }, value: user.email })),\n                React.createElement(AvGroup, { check: true },\n                    React.createElement(Label, null,\n                        React.createElement(AvInput, { type: \"checkbox\", name: \"activated\", value: user.activated }),\n                        ' ',\n                        React.createElement(Translate, { contentKey: \"userManagement.activated\" }, \"Activated\"))),\n                React.createElement(AvGroup, null,\n                    React.createElement(Label, { for: \"langKey\" },\n                        React.createElement(Translate, { contentKey: \"userManagement.langKey\" }, \"Language Key\")),\n                    React.createElement(AvField, { type: \"select\", className: \"form-control\", name: \"langKey\", value: user.langKey }, locales.map(locale => (React.createElement(\"option\", { value: locale, key: locale }, languages[locale].name))))),\n                React.createElement(AvGroup, null,\n                    React.createElement(Label, { for: \"authorities\" },\n                        React.createElement(Translate, { contentKey: \"userManagement.profiles\" }, \"Language Key\")),\n                    React.createElement(AvInput, { type: \"select\", className: \"form-control\", name: \"authorities\", value: user.authorities, multiple: true }, roles.map(role => (React.createElement(\"option\", { value: role, key: role }, role))))),\n                React.createElement(Button, { tag: Link, to: \"/admin/user-management\", replace: true, color: \"info\" },\n                    React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\n                    \"\\u00A0\",\n                    React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                        React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\n                \"\\u00A0\",\n                React.createElement(Button, { color: \"primary\", type: \"submit\", disabled: isInvalid || updating },\n                    React.createElement(FontAwesomeIcon, { icon: \"save\" }),\n                    \"\\u00A0\",\n                    React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\n};\nconst mapStateToProps = (storeState) => ({\n    user: storeState.userManagement.user,\n    roles: storeState.userManagement.authorities,\n    loading: storeState.userManagement.loading,\n    updating: storeState.userManagement.updating\n});\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\n",{"version":3,"file":"/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","sourceRoot":"","sources":["/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/My-Technical-Learnings/yeoman-test/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { locales, languages } from 'app/config/translation';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport const UserManagementUpdate = (props: IUserManagementUpdateProps) => {\n  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);\n\n  useEffect(() => {\n    if (isNew) {\n      props.reset();\n    } else {\n      props.getUser(props.match.params.login);\n    }\n    props.getRoles();\n    return () => props.reset();\n  }, []);\n\n  const handleClose = () => {\n    props.history.push('/admin/user-management');\n  };\n\n  const saveUser = (event, values) => {\n    if (isNew) {\n      props.createUser(values);\n    } else {\n      props.updateUser(values);\n    }\n    handleClose();\n  };\n\n  const isInvalid = false;\n  const { user, loading, updating, roles } = props;\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h1>\n            <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\n          </h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <AvForm onValidSubmit={saveUser}>\n              {user.id ? (\n                <AvGroup>\n                  <Label for=\"id\">\n                    <Translate contentKey=\"global.field.id\">ID</Translate>\n                  </Label>\n                  <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\n                </AvGroup>\n              ) : null}\n              <AvGroup>\n                <Label for=\"login\">\n                  <Translate contentKey=\"userManagement.login\">Login</Translate>\n                </Label>\n                <AvField\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"login\"\n                  validate={{\n                    required: {\n                      value: true,\n                      errorMessage: translate('register.messages.validate.login.required')\n                    },\n                    pattern: {\n                      value: '^[_.@A-Za-z0-9-]*$',\n                      errorMessage: translate('register.messages.validate.login.pattern')\n                    },\n                    minLength: {\n                      value: 1,\n                      errorMessage: translate('register.messages.validate.login.minlength')\n                    },\n                    maxLength: {\n                      value: 50,\n                      errorMessage: translate('register.messages.validate.login.maxlength')\n                    }\n                  }}\n                  value={user.login}\n                />\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"firstName\">\n                  <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n                </Label>\n                <AvField\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"firstName\"\n                  validate={{\n                    maxLength: {\n                      value: 50,\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                    }\n                  }}\n                  value={user.firstName}\n                />\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"lastName\">\n                  <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n                </Label>\n                <AvField\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"lastName\"\n                  validate={{\n                    maxLength: {\n                      value: 50,\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                    }\n                  }}\n                  value={user.lastName}\n                />\n                <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n              </AvGroup>\n              <AvGroup>\n                <AvField\n                  name=\"email\"\n                  label={translate('global.form.email.label')}\n                  placeholder={translate('global.form.email.placeholder')}\n                  type=\"email\"\n                  validate={{\n                    required: {\n                      value: true,\n                      errorMessage: translate('global.messages.validate.email.required')\n                    },\n                    email: {\n                      errorMessage: translate('global.messages.validate.email.invalid')\n                    },\n                    minLength: {\n                      value: 5,\n                      errorMessage: translate('global.messages.validate.email.minlength')\n                    },\n                    maxLength: {\n                      value: 254,\n                      errorMessage: translate('global.messages.validate.email.maxlength')\n                    }\n                  }}\n                  value={user.email}\n                />\n              </AvGroup>\n              <AvGroup check>\n                <Label>\n                  <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} />{' '}\n                  <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n                </Label>\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"langKey\">\n                  <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\n                </Label>\n                <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey}>\n                  {locales.map(locale => (\n                    <option value={locale} key={locale}>\n                      {languages[locale].name}\n                    </option>\n                  ))}\n                </AvField>\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"authorities\">\n                  <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\n                </Label>\n                <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\n                  {roles.map(role => (\n                    <option value={role} key={role}>\n                      {role}\n                    </option>\n                  ))}\n                </AvInput>\n              </AvGroup>\n              <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n                <FontAwesomeIcon icon=\"arrow-left\" />\n                &nbsp;\n                <span className=\"d-none d-md-inline\">\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\n                </span>\n              </Button>\n              &nbsp;\n              <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n                <FontAwesomeIcon icon=\"save\" />\n                &nbsp;\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\n              </Button>\n            </AvForm>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementUpdate);\n"]}]}