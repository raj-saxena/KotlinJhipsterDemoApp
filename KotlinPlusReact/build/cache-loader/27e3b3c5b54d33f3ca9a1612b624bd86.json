{"remainingRequest":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/ts-loader/index.js??ref--4-3!/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/account/register/register.tsx","dependencies":[{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/account/register/register.tsx","mtime":1571750346160},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { handleRegister, reset } from './register.reducer';\nexport const RegisterPage = (props) => {\n    const [password, setPassword] = useState('');\n    useEffect(() => () => props.reset(), []);\n    const handleValidSubmit = (event, values) => {\n        props.handleRegister(values.username, values.email, values.firstPassword, props.currentLocale);\n        event.preventDefault();\n    };\n    const updatePassword = event => setPassword(event.target.value);\n    return (React.createElement(\"div\", null,\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" },\n                React.createElement(\"h1\", { id: \"register-title\" },\n                    React.createElement(Translate, { contentKey: \"register.title\" }, \"Registration\")))),\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" },\n                React.createElement(AvForm, { id: \"register-form\", onValidSubmit: handleValidSubmit },\n                    React.createElement(AvField, { name: \"username\", label: translate('global.form.username.label'), placeholder: translate('global.form.username.placeholder'), validate: {\n                            required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\n                            pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\n                            minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\n                            maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\n                        } }),\n                    React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\n                            required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                            minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                            maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                        } }),\n                    React.createElement(AvField, { name: \"firstPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", onChange: updatePassword, validate: {\n                            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                        } }),\n                    React.createElement(PasswordStrengthBar, { password: password }),\n                    React.createElement(AvField, { name: \"secondPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                            required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                            minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                            maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                            match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\n                        } }),\n                    React.createElement(Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" },\n                        React.createElement(Translate, { contentKey: \"register.form.button\" }, \"Register\"))),\n                React.createElement(\"p\", null, \"\\u00A0\"),\n                React.createElement(Alert, { color: \"warning\" },\n                    React.createElement(\"span\", null,\n                        React.createElement(Translate, { contentKey: \"global.messages.info.authenticated.prefix\" }, \"If you want to \")),\n                    React.createElement(\"a\", { className: \"alert-link\" },\n                        React.createElement(Translate, { contentKey: \"global.messages.info.authenticated.link\" }, \" sign in\")),\n                    React.createElement(\"span\", null,\n                        React.createElement(Translate, { contentKey: \"global.messages.info.authenticated.suffix\" },\n                            \", you can try the default accounts:\",\n                            React.createElement(\"br\", null),\n                            \"- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")\",\n                            React.createElement(\"br\", null),\n                            \"- User (login=\\\"user\\\" and password=\\\"user\\\").\")))))));\n};\nconst mapStateToProps = ({ locale }) => ({\n    currentLocale: locale.currentLocale\n});\nconst mapDispatchToProps = { handleRegister, reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\n",{"version":3,"file":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/account/register/register.tsx","sourceRoot":"","sources":["/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/account/register/register.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAErD,OAAO,mBAAmB,MAAM,kDAAkD,CAAC;AAEnF,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAI3D,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,KAAqB,EAAE,EAAE;IACpD,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAE7C,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IAEzC,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAC1C,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;QAC/F,KAAK,CAAC,cAAc,EAAE,CAAC;IACzB,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEhE,OAAO,CACL;QACE,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;YACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;gBACT,4BAAI,EAAE,EAAC,gBAAgB;oBACrB,oBAAC,SAAS,IAAC,UAAU,EAAC,gBAAgB,mBAAyB,CAC5D,CACD,CACF;QACN,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;YACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;gBACT,oBAAC,MAAM,IAAC,EAAE,EAAC,eAAe,EAAC,aAAa,EAAE,iBAAiB;oBACzD,oBAAC,OAAO,IACN,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,SAAS,CAAC,4BAA4B,CAAC,EAC9C,WAAW,EAAE,SAAS,CAAC,kCAAkC,CAAC,EAC1D,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,2CAA2C,CAAC,EAAE;4BAC/F,OAAO,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;4BAC7G,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,4CAA4C,CAAC,EAAE;4BAC9F,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,4CAA4C,CAAC,EAAE;yBAChG,GACD;oBACF,oBAAC,OAAO,IACN,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,SAAS,CAAC,yBAAyB,CAAC,EAC3C,WAAW,EAAE,SAAS,CAAC,+BAA+B,CAAC,EACvD,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,yCAAyC,CAAC,EAAE;4BAC7F,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;4BAC5F,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,CAAC,0CAA0C,CAAC,EAAE;yBAC/F,GACD;oBACF,oBAAC,OAAO,IACN,IAAI,EAAC,eAAe,EACpB,KAAK,EAAE,SAAS,CAAC,+BAA+B,CAAC,EACjD,WAAW,EAAE,SAAS,CAAC,qCAAqC,CAAC,EAC7D,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE,cAAc,EACxB,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,+CAA+C,CAAC,EAAE;4BACnG,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,gDAAgD,CAAC,EAAE;4BAClG,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,gDAAgD,CAAC,EAAE;yBACpG,GACD;oBACF,oBAAC,mBAAmB,IAAC,QAAQ,EAAE,QAAQ,GAAI;oBAC3C,oBAAC,OAAO,IACN,IAAI,EAAC,gBAAgB,EACrB,KAAK,EAAE,SAAS,CAAC,mCAAmC,CAAC,EACrD,WAAW,EAAE,SAAS,CAAC,yCAAyC,CAAC,EACjE,IAAI,EAAC,UAAU,EACf,QAAQ,EAAE;4BACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,mDAAmD,CAAC,EAAE;4BACvG,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,SAAS,CAAC,oDAAoD,CAAC,EAAE;4BACtG,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,CAAC,oDAAoD,CAAC,EAAE;4BACvG,KAAK,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE,YAAY,EAAE,SAAS,CAAC,iCAAiC,CAAC,EAAE;yBAC9F,GACD;oBACF,oBAAC,MAAM,IAAC,EAAE,EAAC,iBAAiB,EAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ;wBACxD,oBAAC,SAAS,IAAC,UAAU,EAAC,sBAAsB,eAAqB,CAC1D,CACF;gBACT,wCAAa;gBACb,oBAAC,KAAK,IAAC,KAAK,EAAC,SAAS;oBACpB;wBACE,oBAAC,SAAS,IAAC,UAAU,EAAC,2CAA2C,sBAA4B,CACxF;oBACP,2BAAG,SAAS,EAAC,YAAY;wBACvB,oBAAC,SAAS,IAAC,UAAU,EAAC,yCAAyC,eAAqB,CAClF;oBACJ;wBACE,oBAAC,SAAS,IAAC,UAAU,EAAC,2CAA2C;;4BAE/D,+BAAM;;4BACN,+BAAM;6EACI,CACP,CACD,CACJ,CACF,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,EAAE,MAAM,EAAc,EAAE,EAAE,CAAC,CAAC;IACnD,aAAa,EAAE,MAAM,CAAC,aAAa;CACpC,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC;AAIrD,eAAe,OAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\n\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { IRootState } from 'app/shared/reducers';\nimport { handleRegister, reset } from './register.reducer';\n\nexport interface IRegisterProps extends StateProps, DispatchProps {}\n\nexport const RegisterPage = (props: IRegisterProps) => {\n  const [password, setPassword] = useState('');\n\n  useEffect(() => () => props.reset(), []);\n\n  const handleValidSubmit = (event, values) => {\n    props.handleRegister(values.username, values.email, values.firstPassword, props.currentLocale);\n    event.preventDefault();\n  };\n\n  const updatePassword = event => setPassword(event.target.value);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h1 id=\"register-title\">\n            <Translate contentKey=\"register.title\">Registration</Translate>\n          </h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <AvForm id=\"register-form\" onValidSubmit={handleValidSubmit}>\n            <AvField\n              name=\"username\"\n              label={translate('global.form.username.label')}\n              placeholder={translate('global.form.username.placeholder')}\n              validate={{\n                required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\n                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\n                minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\n                maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\n              }}\n            />\n            <AvField\n              name=\"email\"\n              label={translate('global.form.email.label')}\n              placeholder={translate('global.form.email.placeholder')}\n              type=\"email\"\n              validate={{\n                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n              }}\n            />\n            <AvField\n              name=\"firstPassword\"\n              label={translate('global.form.newpassword.label')}\n              placeholder={translate('global.form.newpassword.placeholder')}\n              type=\"password\"\n              onChange={updatePassword}\n              validate={{\n                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n              }}\n            />\n            <PasswordStrengthBar password={password} />\n            <AvField\n              name=\"secondPassword\"\n              label={translate('global.form.confirmpassword.label')}\n              placeholder={translate('global.form.confirmpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\n              }}\n            />\n            <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\n              <Translate contentKey=\"register.form.button\">Register</Translate>\n            </Button>\n          </AvForm>\n          <p>&nbsp;</p>\n          <Alert color=\"warning\">\n            <span>\n              <Translate contentKey=\"global.messages.info.authenticated.prefix\">If you want to </Translate>\n            </span>\n            <a className=\"alert-link\">\n              <Translate contentKey=\"global.messages.info.authenticated.link\"> sign in</Translate>\n            </a>\n            <span>\n              <Translate contentKey=\"global.messages.info.authenticated.suffix\">\n                , you can try the default accounts:\n                <br />- Administrator (login=&quot;admin&quot; and password=&quot;admin&quot;)\n                <br />- User (login=&quot;user&quot; and password=&quot;user&quot;).\n              </Translate>\n            </span>\n          </Alert>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ locale }: IRootState) => ({\n  currentLocale: locale.currentLocale\n});\n\nconst mapDispatchToProps = { handleRegister, reset };\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegisterPage);\n"]}]}