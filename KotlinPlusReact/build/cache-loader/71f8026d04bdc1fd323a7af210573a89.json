{"remainingRequest":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/ts-loader/index.js??ref--4-3!/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/administration/health/health.tsx","dependencies":[{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/administration/health/health.tsx","mtime":1571750346331},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\nexport const HealthPage = (props) => {\n    const [healthObject, setHealthObject] = useState({});\n    const [showModal, setShowModal] = useState(false);\n    useEffect(() => {\n        props.systemHealth();\n    }, []);\n    const getSystemHealth = () => {\n        if (!props.isFetching) {\n            props.systemHealth();\n        }\n    };\n    const getSystemHealthInfo = (name, healthObj) => () => {\n        setShowModal(true);\n        setHealthObject(Object.assign({}, healthObj, { name }));\n    };\n    const handleClose = () => setShowModal(false);\n    const renderModal = () => React.createElement(HealthModal, { healthObject: healthObject, handleClose: handleClose, showModal: showModal });\n    const { health, isFetching } = props;\n    const data = (health || {}).details || {};\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h2\", { id: \"health-page-heading\" }, \"Health Checks\"),\n        React.createElement(\"p\", null,\n            React.createElement(Button, { onClick: getSystemHealth, color: isFetching ? 'btn btn-danger' : 'btn btn-primary', disabled: isFetching },\n                React.createElement(FontAwesomeIcon, { icon: \"sync\" }),\n                \"\\u00A0\",\n                React.createElement(Translate, { component: \"span\", contentKey: \"health.refresh.button\" }, \"Refresh\"))),\n        React.createElement(Row, null,\n            React.createElement(Col, { md: \"12\" },\n                React.createElement(Table, { bordered: true, \"aria-describedby\": \"health-page-heading\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, \"Service Name\"),\n                            React.createElement(\"th\", null, \"Status\"),\n                            React.createElement(\"th\", null, \"Details\"))),\n                    React.createElement(\"tbody\", null, Object.keys(data).map((configPropKey, configPropIndex) => configPropKey !== 'status' ? (React.createElement(\"tr\", { key: configPropIndex },\n                        React.createElement(\"td\", null, configPropKey),\n                        React.createElement(\"td\", null,\n                            React.createElement(Badge, { color: data[configPropKey].status !== 'UP' ? 'danger' : 'success' }, data[configPropKey].status)),\n                        React.createElement(\"td\", null, data[configPropKey].details ? (React.createElement(\"a\", { onClick: getSystemHealthInfo(configPropKey, data[configPropKey]) },\n                            React.createElement(FontAwesomeIcon, { icon: \"eye\" }))) : null))) : null))))),\n        renderModal()));\n};\nconst mapStateToProps = (storeState) => ({\n    health: storeState.administration.health,\n    isFetching: storeState.administration.loading\n});\nconst mapDispatchToProps = { systemHealth };\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\n",{"version":3,"file":"/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/administration/health/health.tsx","sourceRoot":"","sources":["/Users/raj/workspace/github/KotlinJhipsterDemoApp/node_modules/eslint-loader/index.js!/Users/raj/workspace/github/KotlinJhipsterDemoApp/src/main/webapp/app/modules/administration/health/health.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport const HealthPage = (props: IHealthPageProps) => {\n  const [healthObject, setHealthObject] = useState({});\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    props.systemHealth();\n  }, []);\n\n  const getSystemHealth = () => {\n    if (!props.isFetching) {\n      props.systemHealth();\n    }\n  };\n\n  const getSystemHealthInfo = (name, healthObj) => () => {\n    setShowModal(true);\n    setHealthObject({ ...healthObj, name });\n  };\n\n  const handleClose = () => setShowModal(false);\n\n  const renderModal = () => <HealthModal healthObject={healthObject} handleClose={handleClose} showModal={showModal} />;\n\n  const { health, isFetching } = props;\n  const data = (health || {}).details || {};\n\n  return (\n    <div>\n      <h2 id=\"health-page-heading\">Health Checks</h2>\n      <p>\n        <Button onClick={getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n          <FontAwesomeIcon icon=\"sync\" />\n          &nbsp;\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\n            Refresh\n          </Translate>\n        </Button>\n      </p>\n      <Row>\n        <Col md=\"12\">\n          <Table bordered aria-describedby=\"health-page-heading\">\n            <thead>\n              <tr>\n                <th>Service Name</th>\n                <th>Status</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\n                configPropKey !== 'status' ? (\n                  <tr key={configPropIndex}>\n                    <td>{configPropKey}</td>\n                    <td>\n                      <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\n                    </td>\n                    <td>\n                      {data[configPropKey].details ? (\n                        <a onClick={getSystemHealthInfo(configPropKey, data[configPropKey])}>\n                          <FontAwesomeIcon icon=\"eye\" />\n                        </a>\n                      ) : null}\n                    </td>\n                  </tr>\n                ) : null\n              )}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n      {renderModal()}\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HealthPage);\n"]}]}