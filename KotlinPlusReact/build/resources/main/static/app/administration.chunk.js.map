{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack:///./src/main/webapp/app/shared/util/pagination.constants.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Input, Row, Table } from 'reactstrap';\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState, IPaginationBaseState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getAudits } from '../administration.reducer';\n\nexport interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nconst previousMonth = (): string => {\n  const now: Date = new Date();\n  const fromDate =\n    now.getMonth() === 0\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\n  return fromDate.toISOString().slice(0, 10);\n};\n\nconst today = (): string => {\n  // Today + 1 day - needed if the current day must be included\n  const day: Date = new Date();\n  day.setDate(day.getDate() + 1);\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n  return toDate.toISOString().slice(0, 10);\n};\n\nexport const AuditsPage = (props: IAuditsPageProps) => {\n  const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));\n  const [fromDate, setFromDate] = useState(previousMonth());\n  const [toDate, setToDate] = useState(today());\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    getAllAudits();\n  }, [fromDate, toDate, pagination.activePage, pagination.order, pagination.sort]);\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    transition();\n  }, [pagination.activePage, pagination.order, pagination.sort]);\n\n  const onChangeFromDate = evt => setFromDate(evt.target.value);\n\n  const onChangeToDate = evt => setToDate(evt.target.value);\n\n  const sort = p => () =>\n    setPagination({\n      ...pagination,\n      order: pagination.order === 'asc' ? 'desc' : 'asc',\n      sort: p\n    });\n\n  const transition = () => {\n    props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);\n  };\n\n  const handlePagination = currentPage =>\n    setPagination({\n      ...pagination,\n      activePage: currentPage\n    });\n\n  const getAllAudits = () => {\n    props.getAudits(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`, fromDate, toDate);\n  };\n\n  const { audits, totalItems } = props;\n\n  return (\n    <div>\n      <h2 id=\"audits-page-heading\">Audits</h2>\n      <span>\n        <Translate contentKey=\"audits.filter.from\">from</Translate>\n      </span>\n      <Input type=\"date\" value={fromDate} onChange={onChangeFromDate} name=\"fromDate\" id=\"fromDate\" />\n      <span>\n        <Translate contentKey=\"audits.filter.to\">to</Translate>\n      </span>\n      <Input type=\"date\" value={toDate} onChange={onChangeToDate} name=\"toDate\" id=\"toDate\" />\n      {audits && audits.length > 0 ? (\n        <Table striped responsive>\n          <thead>\n            <tr>\n              <th onClick={sort('auditEventDate')}>\n                <Translate contentKey=\"audits.table.header.date\">Date</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={sort('principal')}>\n                <Translate contentKey=\"audits.table.header.principal\">User</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th onClick={sort('auditEventType')}>\n                <Translate contentKey=\"audits.table.header.status\">State</Translate>\n                <FontAwesomeIcon icon=\"sort\" />\n              </th>\n              <th>\n                <Translate contentKey=\"audits.table.header.data\">Extra data</Translate>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {audits.map((audit, i) => (\n              <tr key={`audit-${i}`}>\n                <td>{<TextFormat value={audit.timestamp} type=\"date\" format={APP_TIMESTAMP_FORMAT} />}</td>\n                <td>{audit.principal}</td>\n                <td>{audit.type}</td>\n                <td>\n                  {audit.data ? audit.data.message : null}\n                  {audit.data ? audit.data.remoteAddress : null}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <div className=\"alert alert-warning\">\n          <Translate contentKey=\"audits.notFound\">No audit found</Translate>\n        </div>\n      )}\n      <div className={audits && audits.length > 0 ? '' : 'd-none'}>\n        <Row className=\"justify-content-center\">\n          <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\n        </Row>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            activePage={pagination.activePage}\n            onSelect={handlePagination}\n            maxButtons={5}\n            itemsPerPage={pagination.itemsPerPage}\n            totalItems={props.totalItems}\n          />\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  audits: storeState.administration.audits,\n  totalItems: storeState.administration.totalItems\n});\n\nconst mapDispatchToProps = { getAudits };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuditsPage);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Input, Row, Col, Badge } from 'reactstrap';\nimport { Translate } from 'react-jhipster';\n\nimport { getConfigurations, getEnv } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IConfigurationPageProps extends StateProps, DispatchProps {}\n\nexport const ConfigurationPage = (props: IConfigurationPageProps) => {\n  const [filter, setFilter] = useState('');\n  const [reversePrefix, setReversePrefix] = useState(false);\n  const [reverseProperties, setReverseProperties] = useState(false);\n\n  useEffect(() => {\n    props.getConfigurations();\n    props.getEnv();\n  }, []);\n\n  const changeFilter = evt => setFilter(evt.target.value);\n\n  const envFilterFn = configProp => configProp.toUpperCase().includes(filter.toUpperCase());\n\n  const propsFilterFn = configProp => configProp.prefix.toUpperCase().includes(filter.toUpperCase());\n\n  const changeReversePrefix = () => setReversePrefix(!reversePrefix);\n\n  const changeReverseProperties = () => setReverseProperties(!reverseProperties);\n\n  const getContextList = contexts =>\n    Object.values(contexts)\n      .map((v: any) => v.beans)\n      .reduce((acc, e) => ({ ...acc, ...e }));\n\n  const { configuration } = props;\n\n  const configProps = configuration && configuration.configProps ? configuration.configProps : {};\n\n  const env = configuration && configuration.env ? configuration.env : {};\n\n  return (\n    <div>\n      <h2 id=\"configuration-page-heading\">\n        <Translate contentKey=\"configuration.title\">Configuration</Translate>\n      </h2>\n      <span>\n        <Translate contentKey=\"configuration.filter\">Filter</Translate>\n      </span>{' '}\n      <Input type=\"search\" value={filter} onChange={changeFilter} name=\"search\" id=\"search\" />\n      <label>Spring configuration</label>\n      <Table className=\"table table-striped table-bordered table-responsive d-table\">\n        <thead>\n          <tr>\n            <th onClick={changeReversePrefix}>\n              <Translate contentKey=\"configuration.table.prefix\">Prefix</Translate>\n            </th>\n            <th onClick={changeReverseProperties}>\n              <Translate contentKey=\"configuration.table.properties\">Properties</Translate>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {configProps.contexts\n            ? Object.values(getContextList(configProps.contexts))\n                .filter(propsFilterFn)\n                .map((property, propIndex) => (\n                  <tr key={propIndex}>\n                    <td>{property['prefix']}</td>\n                    <td>\n                      {Object.keys(property['properties']).map((propKey, index) => (\n                        <Row key={index}>\n                          <Col md=\"4\">{propKey}</Col>\n                          <Col md=\"8\">\n                            <Badge className=\"float-right badge-secondary break\">{JSON.stringify(property['properties'][propKey])}</Badge>\n                          </Col>\n                        </Row>\n                      ))}\n                    </td>\n                  </tr>\n                ))\n            : null}\n        </tbody>\n      </Table>\n      {env.propertySources\n        ? env.propertySources.map((envKey, envIndex) => (\n            <div key={envIndex}>\n              <h4>\n                <span>{envKey.name}</span>\n              </h4>\n              <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\n                <thead>\n                  <tr key={envIndex}>\n                    <th className=\"w-40\">Property</th>\n                    <th className=\"w-60\">Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(envKey.properties)\n                    .filter(envFilterFn)\n                    .map((propKey, propIndex) => (\n                      <tr key={propIndex}>\n                        <td className=\"break\">{propKey}</td>\n                        <td className=\"break\">\n                          <span className=\"float-right badge badge-secondary break\">{envKey.properties[propKey].value}</span>\n                        </td>\n                      </tr>\n                    ))}\n                </tbody>\n              </Table>\n            </div>\n          ))\n        : null}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  configuration: administration.configuration,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getConfigurations, getEnv };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConfigurationPage);\n","import React from 'react';\n\nconst DocsPage = () => (\n  <div>\n    <iframe src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\" title=\"Swagger UI\" seamless style={{ border: 'none' }} />\n  </div>\n);\n\nexport default DocsPage;\n","import React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst formatDiskSpaceOutput = rawValue => {\n  // Should display storage space in an human readable unit\n  const val = rawValue / 1073741824;\n  if (val > 1) {\n    // Value\n    return val.toFixed(2) + ' GB';\n  } else {\n    return (rawValue / 1048576).toFixed(2) + ' MB';\n  }\n};\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\n  const data = healthObject.details || {};\n  return (\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n      <ModalBody>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((key, index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default HealthModal;\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\n\nexport const HealthPage = (props: IHealthPageProps) => {\n  const [healthObject, setHealthObject] = useState({});\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    props.systemHealth();\n  }, []);\n\n  const getSystemHealth = () => {\n    if (!props.isFetching) {\n      props.systemHealth();\n    }\n  };\n\n  const getSystemHealthInfo = (name, healthObj) => () => {\n    setShowModal(true);\n    setHealthObject({ ...healthObj, name });\n  };\n\n  const handleClose = () => setShowModal(false);\n\n  const renderModal = () => <HealthModal healthObject={healthObject} handleClose={handleClose} showModal={showModal} />;\n\n  const { health, isFetching } = props;\n  const data = (health || {}).details || {};\n\n  return (\n    <div>\n      <h2 id=\"health-page-heading\">Health Checks</h2>\n      <p>\n        <Button onClick={getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n          <FontAwesomeIcon icon=\"sync\" />\n          &nbsp;\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\n            Refresh\n          </Translate>\n        </Button>\n      </p>\n      <Row>\n        <Col md=\"12\">\n          <Table bordered aria-describedby=\"health-page-heading\">\n            <thead>\n              <tr>\n                <th>Service Name</th>\n                <th>Status</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\n                configPropKey !== 'status' ? (\n                  <tr key={configPropIndex}>\n                    <td>{configPropKey}</td>\n                    <td>\n                      <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\n                    </td>\n                    <td>\n                      {data[configPropKey].details ? (\n                        <a onClick={getSystemHealthInfo(configPropKey, data[configPropKey])}>\n                          <FontAwesomeIcon icon=\"eye\" />\n                        </a>\n                      ) : null}\n                    </td>\n                  </tr>\n                ) : null\n              )}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n      {renderModal()}\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.loading\n});\n\nconst mapDispatchToProps = { systemHealth };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HealthPage);\n","import React from 'react';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport Logs from './logs/logs';\nimport Health from './health/health';\nimport Metrics from './metrics/metrics';\nimport Configuration from './configuration/configuration';\nimport Audits from './audits/audits';\nimport Docs from './docs/docs';\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\n    <ErrorBoundaryRoute exact path={`${match.url}/configuration`} component={Configuration} />\n    <ErrorBoundaryRoute exact path={`${match.url}/audits`} component={Audits} />\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\n  </div>\n);\n\nexport default Routes;\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\n\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\n\nexport const LogsPage = (props: ILogsPageProps) => {\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    props.getLoggers();\n  }, []);\n\n  const getLogs = () => {\n    if (!props.isFetching) {\n      props.getLoggers();\n    }\n  };\n\n  const changeLevel = (loggerName, level) => () => props.changeLogLevel(loggerName, level);\n\n  const changeFilter = evt => setFilter(evt.target.value);\n\n  const getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\n\n  const filterFn = l => l.name.toUpperCase().includes(filter.toUpperCase());\n\n  const { logs, isFetching } = props;\n  const loggers = logs ? Object.entries(logs.loggers).map(e => ({ name: e[0], level: e[1].effectiveLevel })) : [];\n\n  return (\n    <div>\n      <h2 id=\"logs-page-heading\">\n        <Translate contentKey=\"logs.title\">Logs</Translate>\n      </h2>\n      <p>\n        <Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>\n          There are {loggers.length.toString()} loggers.\n        </Translate>\n      </p>\n\n      <span>\n        <Translate contentKey=\"logs.filter\">Filter</Translate>\n      </span>\n      <input type=\"text\" value={filter} onChange={changeFilter} className=\"form-control\" disabled={isFetching} />\n\n      <table className=\"table table-sm table-striped table-bordered\" aria-describedby=\"logs-page-heading\">\n        <thead>\n          <tr title=\"click to order\">\n            <th>\n              <span>\n                <Translate contentKey=\"logs.table.name\">Name</Translate>\n              </span>\n            </th>\n            <th>\n              <span>\n                <Translate contentKey=\"logs.table.level\">Level</Translate>\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {loggers.filter(filterFn).map((logger, i) => (\n            <tr key={`log-row-${i}`}>\n              <td>\n                <small>{logger.name}</small>\n              </td>\n              <td>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, 'TRACE')}\n                  className={getClassName(logger.level, 'TRACE', 'primary')}\n                >\n                  TRACE\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, 'DEBUG')}\n                  className={getClassName(logger.level, 'DEBUG', 'success')}\n                >\n                  DEBUG\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, 'INFO')}\n                  className={getClassName(logger.level, 'INFO', 'info')}\n                >\n                  INFO\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, 'WARN')}\n                  className={getClassName(logger.level, 'WARN', 'warning')}\n                >\n                  WARN\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, 'ERROR')}\n                  className={getClassName(logger.level, 'ERROR', 'danger')}\n                >\n                  ERROR\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, 'OFF')}\n                  className={getClassName(logger.level, 'OFF', 'secondary')}\n                >\n                  OFF\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  logs: administration.logs,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LogsPage);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Progress, Row, Table } from 'reactstrap';\nimport {\n  CacheMetrics,\n  DatasourceMetrics,\n  GarbageCollectorMetrics,\n  HttpRequestMetrics,\n  JvmMemory,\n  JvmThreads,\n  EndpointsRequestsMetrics,\n  SystemMetrics,\n  Translate\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_TIMESTAMP_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT, APP_WHOLE_NUMBER_FORMAT } from 'app/config/constants';\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\n\nexport const MetricsPage = (props: IMetricsPageProps) => {\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    props.systemMetrics();\n    props.systemThreadDump();\n  }, []);\n\n  const getMetrics = () => {\n    if (!props.isFetching) {\n      props.systemMetrics();\n      props.systemThreadDump();\n    }\n  };\n\n  const { metrics, threadDump, isFetching } = props;\n\n  return (\n    <div>\n      <h2 id=\"metrics-page-heading\">Application Metrics</h2>\n      <p>\n        <Button onClick={getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n          <FontAwesomeIcon icon=\"sync\" />\n          &nbsp;\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\n            Refresh\n          </Translate>\n        </Button>\n      </p>\n      <hr />\n\n      <Row>\n        <Col sm=\"12\">\n          <h3>JVM Metrics</h3>\n          <Row>\n            <Col md=\"4\">\n              {metrics && metrics.jvm ? <JvmMemory jvmMetrics={metrics.jvm} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}\n            </Col>\n            <Col md=\"4\">{threadDump ? <JvmThreads jvmThreads={threadDump} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}</Col>\n            <Col md=\"4\">\n              {metrics && metrics.processMetrics ? (\n                <SystemMetrics\n                  systemMetrics={metrics.processMetrics}\n                  wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n                  timestampFormat={APP_TIMESTAMP_FORMAT}\n                />\n              ) : (\n                ''\n              )}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n\n      {metrics && metrics.garbageCollector ? (\n        <GarbageCollectorMetrics garbageCollectorMetrics={metrics.garbageCollector} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\n      ) : (\n        ''\n      )}\n      {metrics && metrics['http.server.requests'] ? (\n        <HttpRequestMetrics\n          requestMetrics={metrics['http.server.requests']}\n          twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n          wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n        />\n      ) : (\n        ''\n      )}\n      {metrics && metrics.endpointsRequests ? (\n        <EndpointsRequestsMetrics endpointsRequestsMetrics={metrics.endpointsRequests} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\n      ) : (\n        ''\n      )}\n\n      {metrics.cache ? (\n        <Row>\n          <Col sm=\"12\">\n            <CacheMetrics cacheMetrics={metrics.cache} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n          </Col>\n        </Row>\n      ) : (\n        ''\n      )}\n\n      {metrics.databases && JSON.stringify(metrics.databases) !== '{}' ? (\n        <Row>\n          <Col sm=\"12\">\n            <DatasourceMetrics datasourceMetrics={metrics.databases} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n          </Col>\n        </Row>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  metrics: storeState.administration.metrics,\n  isFetching: storeState.administration.loading,\n  threadDump: storeState.administration.threadDump\n});\n\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MetricsPage);\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\nimport UserManagement from './user-management';\nimport UserManagementDetail from './user-management-detail';\nimport UserManagementUpdate from './user-management-update';\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <>\n    <Switch>\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\n    </Switch>\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\n  </>\n);\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { getUser, deleteUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport const UserManagementDeleteDialog = (props: IUserManagementDeleteDialogProps) => {\n  useEffect(() => {\n    props.getUser(props.match.params.login);\n  }, []);\n\n  const handleClose = event => {\n    event.stopPropagation();\n    props.history.goBack();\n  };\n\n  const confirmDelete = event => {\n    props.deleteUser(props.user.login);\n    handleClose(event);\n  };\n\n  const { user } = props;\n\n  return (\n    <Modal isOpen toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>\n        <Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate>\n      </ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>\n          Are you sure you want to delete this User?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={handleClose}>\n          <FontAwesomeIcon icon=\"ban\" />\n          &nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={confirmDelete}>\n          <FontAwesomeIcon icon=\"trash\" />\n          &nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser, deleteUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDeleteDialog);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Badge } from 'reactstrap';\nimport { Translate, TextFormat } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { languages } from 'app/config/translation';\nimport { getUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport const UserManagementDetail = (props: IUserManagementDetailProps) => {\n  useEffect(() => {\n    props.getUser(props.match.params.login);\n  }, []);\n\n  const { user } = props;\n\n  return (\n    <div>\n      <h2>\n        <Translate contentKey=\"userManagement.detail.title\">User</Translate> [<b>{user.login}</b>]\n      </h2>\n      <Row size=\"md\">\n        <dl className=\"jh-entity-details\">\n          <dt>\n            <Translate contentKey=\"userManagement.login\">Login</Translate>\n          </dt>\n          <dd>\n            <span>{user.login}</span>&nbsp;\n            {user.activated ? (\n              <Badge color=\"success\">\n                <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n              </Badge>\n            ) : (\n              <Badge color=\"danger\">\n                <Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate>\n              </Badge>\n            )}\n          </dd>\n          <dt>\n            <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n          </dt>\n          <dd>{user.firstName}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n          </dt>\n          <dd>{user.lastName}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.email\">Email</Translate>\n          </dt>\n          <dd>{user.email}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n          </dt>\n          <dd>{user.langKey ? languages[user.langKey].name : undefined}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.createdBy\">Created By</Translate>\n          </dt>\n          <dd>{user.createdBy}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\n          </dt>\n          <dd>\n            <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n          </dd>\n          <dt>\n            <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\n          </dt>\n          <dd>{user.lastModifiedBy}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\n          </dt>\n          <dd>\n            <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n          </dd>\n          <dt>\n            <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n          </dt>\n          <dd>\n            <ul className=\"list-unstyled\">\n              {user.authorities\n                ? user.authorities.map((authority, i) => (\n                    <li key={`user-auth-${i}`}>\n                      <Badge color=\"info\">{authority}</Badge>\n                    </li>\n                  ))\n                : null}\n            </ul>\n          </dd>\n        </dl>\n      </Row>\n      <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n        <FontAwesomeIcon icon=\"arrow-left\" />{' '}\n        <span className=\"d-none d-md-inline\">\n          <Translate contentKey=\"entity.action.back\">Back</Translate>\n        </span>\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementDetail);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { locales, languages } from 'app/config/translation';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\n\nexport const UserManagementUpdate = (props: IUserManagementUpdateProps) => {\n  const [isNew, setIsNew] = useState(!props.match.params || !props.match.params.login);\n\n  useEffect(() => {\n    if (isNew) {\n      props.reset();\n    } else {\n      props.getUser(props.match.params.login);\n    }\n    props.getRoles();\n    return () => props.reset();\n  }, []);\n\n  const handleClose = () => {\n    props.history.push('/admin/user-management');\n  };\n\n  const saveUser = (event, values) => {\n    if (isNew) {\n      props.createUser(values);\n    } else {\n      props.updateUser(values);\n    }\n    handleClose();\n  };\n\n  const isInvalid = false;\n  const { user, loading, updating, roles } = props;\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h1>\n            <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\n          </h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <AvForm onValidSubmit={saveUser}>\n              {user.id ? (\n                <AvGroup>\n                  <Label for=\"id\">\n                    <Translate contentKey=\"global.field.id\">ID</Translate>\n                  </Label>\n                  <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\n                </AvGroup>\n              ) : null}\n              <AvGroup>\n                <Label for=\"login\">\n                  <Translate contentKey=\"userManagement.login\">Login</Translate>\n                </Label>\n                <AvField\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"login\"\n                  validate={{\n                    required: {\n                      value: true,\n                      errorMessage: translate('register.messages.validate.login.required')\n                    },\n                    pattern: {\n                      value: '^[_.@A-Za-z0-9-]*$',\n                      errorMessage: translate('register.messages.validate.login.pattern')\n                    },\n                    minLength: {\n                      value: 1,\n                      errorMessage: translate('register.messages.validate.login.minlength')\n                    },\n                    maxLength: {\n                      value: 50,\n                      errorMessage: translate('register.messages.validate.login.maxlength')\n                    }\n                  }}\n                  value={user.login}\n                />\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"firstName\">\n                  <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n                </Label>\n                <AvField\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"firstName\"\n                  validate={{\n                    maxLength: {\n                      value: 50,\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                    }\n                  }}\n                  value={user.firstName}\n                />\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"lastName\">\n                  <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n                </Label>\n                <AvField\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"lastName\"\n                  validate={{\n                    maxLength: {\n                      value: 50,\n                      errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                    }\n                  }}\n                  value={user.lastName}\n                />\n                <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n              </AvGroup>\n              <AvGroup>\n                <AvField\n                  name=\"email\"\n                  label={translate('global.form.email.label')}\n                  placeholder={translate('global.form.email.placeholder')}\n                  type=\"email\"\n                  validate={{\n                    required: {\n                      value: true,\n                      errorMessage: translate('global.messages.validate.email.required')\n                    },\n                    email: {\n                      errorMessage: translate('global.messages.validate.email.invalid')\n                    },\n                    minLength: {\n                      value: 5,\n                      errorMessage: translate('global.messages.validate.email.minlength')\n                    },\n                    maxLength: {\n                      value: 254,\n                      errorMessage: translate('global.messages.validate.email.maxlength')\n                    }\n                  }}\n                  value={user.email}\n                />\n              </AvGroup>\n              <AvGroup check>\n                <Label>\n                  <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} />{' '}\n                  <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n                </Label>\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"langKey\">\n                  <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\n                </Label>\n                <AvField type=\"select\" className=\"form-control\" name=\"langKey\" value={user.langKey}>\n                  {locales.map(locale => (\n                    <option value={locale} key={locale}>\n                      {languages[locale].name}\n                    </option>\n                  ))}\n                </AvField>\n              </AvGroup>\n              <AvGroup>\n                <Label for=\"authorities\">\n                  <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\n                </Label>\n                <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\n                  {roles.map(role => (\n                    <option value={role} key={role}>\n                      {role}\n                    </option>\n                  ))}\n                </AvInput>\n              </AvGroup>\n              <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n                <FontAwesomeIcon icon=\"arrow-left\" />\n                &nbsp;\n                <span className=\"d-none d-md-inline\">\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\n                </span>\n              </Button>\n              &nbsp;\n              <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n                <FontAwesomeIcon icon=\"save\" />\n                &nbsp;\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\n              </Button>\n            </AvForm>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagementUpdate);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Table, Row, Badge } from 'reactstrap';\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { APP_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\nimport { getUsers, updateUser } from './user-management.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\n\nexport const UserManagement = (props: IUserManagementProps) => {\n  const [pagination, setPagination] = useState(getSortState(props.location, ITEMS_PER_PAGE));\n\n  const getAllUsers = () => props.getUsers(pagination.activePage - 1, pagination.itemsPerPage, `${pagination.sort},${pagination.order}`);\n\n  useEffect(() => {\n    getAllUsers();\n  }, []);\n\n  const sortUsers = () => getAllUsers();\n\n  useEffect(() => {\n    sortUsers();\n  }, [pagination.activePage, pagination.order, pagination.sort]);\n\n  const sort = p => () => {\n    setPagination({\n      ...pagination,\n      order: pagination.order === 'asc' ? 'desc' : 'asc',\n      sort: p\n    });\n    props.history.push(`${props.location.pathname}?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`);\n  };\n\n  const handlePagination = currentPage =>\n    setPagination({\n      ...pagination,\n      activePage: currentPage\n    });\n\n  const toggleActive = user => () =>\n    props.updateUser({\n      ...user,\n      activated: !user.activated\n    });\n\n  const { users, account, match, totalItems } = props;\n  return (\n    <div>\n      <h2 id=\"user-management-page-heading\">\n        <Translate contentKey=\"userManagement.home.title\">Users</Translate>\n        <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n          <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\n        </Link>\n      </h2>\n      <Table responsive striped>\n        <thead>\n          <tr>\n            <th className=\"hand\" onClick={sort('id')}>\n              <Translate contentKey=\"global.field.id\">ID</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('login')}>\n              <Translate contentKey=\"userManagement.login\">Login</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('email')}>\n              <Translate contentKey=\"userManagement.email\">Email</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th />\n            <th className=\"hand\" onClick={sort('langKey')}>\n              <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th>\n              <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n            </th>\n            <th className=\"hand\" onClick={sort('createdDate')}>\n              <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th className=\"hand\" onClick={sort('lastModifiedBy')}>\n              <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th id=\"modified-date-sort\" className=\"hand\" onClick={sort('lastModifiedDate')}>\n              <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\n              <FontAwesomeIcon icon=\"sort\" />\n            </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, i) => (\n            <tr id={user.login} key={`user-${i}`}>\n              <td>\n                <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\n                  {user.id}\n                </Button>\n              </td>\n              <td>{user.login}</td>\n              <td>{user.email}</td>\n              <td>\n                {user.activated ? (\n                  <Button color=\"success\" onClick={toggleActive(user)}>\n                    Activated\n                  </Button>\n                ) : (\n                  <Button color=\"danger\" onClick={toggleActive(user)}>\n                    Deactivated\n                  </Button>\n                )}\n              </td>\n              <td>{user.langKey}</td>\n              <td>\n                {user.authorities\n                  ? user.authorities.map((authority, j) => (\n                      <div key={`user-auth-${i}-${j}`}>\n                        <Badge color=\"info\">{authority}</Badge>\n                      </div>\n                    ))\n                  : null}\n              </td>\n              <td>\n                <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n              </td>\n              <td>{user.lastModifiedBy}</td>\n              <td>\n                <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\n              </td>\n              <td className=\"text-right\">\n                <div className=\"btn-group flex-btn-group-container\">\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\n                    <FontAwesomeIcon icon=\"eye\" />{' '}\n                    <span className=\"d-none d-md-inline\">\n                      <Translate contentKey=\"entity.action.view\">View</Translate>\n                    </span>\n                  </Button>\n                  <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\n                    <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\n                    <span className=\"d-none d-md-inline\">\n                      <Translate contentKey=\"entity.action.edit\">Edit</Translate>\n                    </span>\n                  </Button>\n                  <Button\n                    tag={Link}\n                    to={`${match.url}/${user.login}/delete`}\n                    color=\"danger\"\n                    size=\"sm\"\n                    disabled={account.login === user.login}\n                  >\n                    <FontAwesomeIcon icon=\"trash\" />{' '}\n                    <span className=\"d-none d-md-inline\">\n                      <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n                    </span>\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <div className={users && users.length > 0 ? '' : 'd-none'}>\n        <Row className=\"justify-content-center\">\n          <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\n        </Row>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            activePage={pagination.activePage}\n            onSelect={handlePagination}\n            maxButtons={5}\n            itemsPerPage={pagination.itemsPerPage}\n            totalItems={props.totalItems}\n          />\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers, updateUser };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserManagement);\n","export const ITEMS_PER_PAGE = 20;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAOA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AAGA;AACA;AACA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACjIA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AAGA;AAWA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAeA;AAKA;AASA;AAMA;AAEA;AACA;AAOA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AAQA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;AC7NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AAMA;AAMA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAWA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AAOA;AAAA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;ACtMA;AAAA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}